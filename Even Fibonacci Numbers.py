# -*- coding: utf-8 -*-
"""Project Euler.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iedXZZzlylJaFu8qRfCah3U3tUinUhzB

**Problem 2**
<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$, the first $10$ terms will be:
$$1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \dots$$</p>
<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>
"""

#Generate a Fibonacci sequence and create a list to store it

def fib_generator(end_num):
  fib_s = [1,2]
  while True:
    for i in range(0, end_num + 1):
      n = fib_s[i] + fib_s[i+1]
      fib_s.append(n)
      if fib_s[-1] >= 4000000:
        break
    break
  return(fib_s)

#I have to admit this is not the best approach
#Assign the last index value for the Fibonacci sequence list
target_fib = fib_generator(90)

#Make sure that the last value does not exceed 4 million
if target_fib[-1] >= 4000000:
  target_fib.pop(-1)

print(target_fib)

#Fetch all the even number in Fibonacci sequence list and store them in another new list
target_fib_num = []
for x in target_fib:
  if x % 2 == 0:
    target_fib_num.append(x)

#Aggregate all the even number
print(sum(target_fib_num))
