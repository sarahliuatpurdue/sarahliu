# -*- coding: utf-8 -*-
"""Largest Palindrome Product.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15-8jvxAbyZJihRTSmeORWqXFiZYAAf5J

**Problem 4**

<p>A palindromic number reads the same both ways. The largest palindrome made from the product of two $2$-digit numbers is $9009 = 91 \times 99$.</p>
<p>Find the largest palindrome made from the product of two $3$-digit numbers.</p>
"""

#Calculate all the products of two 3-digit numbers

product = []
for i in range(100,1000):
  for j in range(100,1000):
    n = i * j
    product.append(n)

#Distinguish the 5-digit and 6-digit products from all the products
five_digit = []
for n in product:
  if len(str(n)) == 5:
    five_digit.append(n)

six_digit = []
for n in product:
  if len(str(n)) == 6:
    six_digit.append(n)

#Use the index to slice the string
#Implement the rule of palindromic number
#Actually we can ignore the 5-digit numbers since they definitely are not the larger numbers in all the products
five_palindromic_number = []
for a in five_digit:
  if (str(a)[0] == str(a)[4] and str(a)[1] == str(a)[3] and str(a)[0] != str(a)[1]):
    five_palindromic_number.append(a)

m_f_p = max(five_palindromic_number)
print(m_f_p)

six_palindromic_number = []
for b in six_digit:
  if (str(b)[0] == str(b)[5] and str(b)[1]==str(b)[4] and str(b)[2]== str(b)[3] and str(b)[0]!= str(b)[1] and str(b)[0]!=str(b)[2] and str(b)[1]!=str(b)[2]):
    six_palindromic_number.append(b)

m_s_p = max(six_palindromic_number)
print(m_s_p)